{"version":3,"file":"static/js/207.0282ec02.chunk.js","mappings":"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","sources":["components/form/ValidateForm.js","components/form/Validate.js","components/form/Form.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nconst ValidateForm = (callback, validate) => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        comment: '',\r\n    });\r\n\r\n    const [errors,setErrors] = useState({});\r\n    const[isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n\r\n    const handleChange = e => {\r\n        setValues({\r\n            ...values,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setErrors(validate(values));\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(errors).length === 0 && isSubmitting){            \r\n            var boton = document.getElementsByClassName('form-input-btn')[0];\r\n            var spin = document.getElementsByClassName('spinner_boton')[0];\r\n            boton.setAttribute('disabled',true);\r\n            var myHeaders = new Headers();\r\n            myHeaders.append(\"content-type\", \"application/x-www-form-urlencoded\");\r\n            const contact={};\r\n    \r\n            var urlencoded = new URLSearchParams();\r\n            urlencoded.append(\"name\", values.name);\r\n            urlencoded.append(\"email\", values.email);\r\n            urlencoded.append(\"phone\", values.phone);\r\n            urlencoded.append(\"message\", values.comment);\r\n            var requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: urlencoded,\r\n            redirect: 'follow'\r\n            };\r\n\r\n            fetch(\"https://jsonplaceholder.typicode.com/posts\", requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => console.log(result)).then(callback())\r\n            .catch(error => console.log('error', error));\r\n        };\r\n    });\r\n\r\n    return {handleChange, values, handleSubmit, errors }\r\n}\r\n\r\nexport default ValidateForm","export default function Validate(values){\r\n    let errors = {};\r\n    var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n    //name\r\n    if(!values.name.trim()){\r\n        errors.name = \"Type your name here, please\"\r\n    }\r\n    else if(values.name.length<3){\r\n        errors.name = \"The name is too short\"\r\n    }\r\n\r\n    //Email\r\n    if(!values.email){\r\n        errors.email = \"Type your email here, please\"\r\n    }\r\n    else if (!pattern.test(values.email)) {\r\n        errors.email = 'The email is not valid';\r\n    }\r\n\r\n    //phone\r\n    if(!values.phone){\r\n        errors.phone = \"Type number phone here, please\"\r\n    }\r\n    else if(values.phone[0] === 1 && values.phone[1] === 5){\r\n        errors.phone = \"Type a number phone without 15\"\r\n    }\r\n\r\n    //comment\r\n    if(!values.comment.trim()){\r\n        errors.comment = \"Write a message here, please\"\r\n    }\r\n\r\n    return errors;\r\n}","import React, {useState} from \"react\";\r\nimport ValidateForm from \"./ValidateForm\";\r\nimport validate from \"./Validate\";\r\nimport './Form.css';\r\n\r\nconst Form = ({ submitForm }) => {\r\n  const { handleChange, values, handleSubmit, errors } = ValidateForm(\r\n    submitForm,\r\n    validate\r\n  );\r\n\r\n  return (\r\n        <>\r\n            <section className=\"contacto_container container\" id=\"contacto\">\r\n                    <div className=\"form-content container\">\r\n                        <form className=\"form\" onSubmit={handleSubmit}>\r\n                            \r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-inputs\">\r\n                                    <label htmlFor=\"name\" className=\"form-label\">\r\n                                    </label>\r\n                                    <input\r\n                                            type=\"text\"\r\n                                            name=\"name\"\r\n                                            id=\"name\"\r\n                                            className=\"form-input\"\r\n                                            value={values.name}\r\n                                            onChange={handleChange}\r\n                                            placeholder=\"Name\"\r\n                                        />\r\n                                        {errors.name && (\r\n                                            <small className=\"input-error\">{errors.name}</small>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"form-inputs\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        className=\"form-input\"\r\n                                        value={values.email}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"Email\"\r\n                                    />\r\n                                    {errors.email && (\r\n                                        <small className=\"input-error\">{errors.email}</small>\r\n                                    )}\r\n                                </div> \r\n\r\n                                <div className=\"form-inputs\">\r\n                                        <label htmlFor=\"phone\" className=\"form-label\">\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"tel\"\r\n                                            name=\"phone\"\r\n                                            id=\"phone\"\r\n                                            className=\"form-input\"\r\n                                            minLength=\"10\"\r\n                                            maxLength=\"12\"\r\n                                            autoComplete=\"none\"\r\n                                            value={values.phone}\r\n                                            onChange={handleChange}\r\n                                            placeholder=\"Phone\"\r\n                                        ></input>\r\n                                        {errors.phone && (\r\n                                            <small className=\"input-error\">{errors.phone}</small>\r\n                                        )}\r\n                                </div>\r\n                            \r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-inputs\">\r\n                                    <label htmlFor=\"comment\" className=\"form-label\">\r\n                                        \r\n                                    </label>\r\n                                    <textarea\r\n                                        name=\"comment\"\r\n                                        className=\"form-input\"\r\n                                        id=\"comment\"\r\n                                        rows=\"3\"\r\n                                        minLength=\"10\"\r\n                                        value={values.comment}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"Message\"\r\n                                    ></textarea>\r\n                                    {errors.comment && (\r\n                                        <small className=\"input-error\">{errors.comment}</small>\r\n                                    )}\r\n                                    </div>\r\n                                </div>\r\n            \r\n                                <div className=\"form-row\" id=\"form-contain-btn\">\r\n                                    <button className=\"btn btn-primary submit form-input-btn\" type=\"submit\">\r\n                                    Send\r\n                                    \r\n                                    </button>\r\n                                </div>\r\n                        </form>\r\n                    </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n"],"names":["callback","validate","useState","name","email","phone","comment","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","boton","document","getElementsByClassName","setAttribute","myHeaders","Headers","append","urlencoded","URLSearchParams","fetch","method","headers","body","redirect","then","response","text","result","console","log","catch","error","handleChange","e","target","value","handleSubmit","preventDefault","Validate","pattern","RegExp","trim","test","submitForm","ValidateForm","className","id","onSubmit","htmlFor","type","onChange","placeholder","minLength","maxLength","autoComplete","rows"],"sourceRoot":""}